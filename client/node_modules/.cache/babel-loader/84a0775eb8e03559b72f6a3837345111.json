{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/git/projects/diary-of-events/client/src/components/Auth/Signup/Signup.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as actions from '../../../store/actions/index';\nimport classes from './Signup.module.css';\nimport { Form, Alert, Spinner } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport Aux from '../../../hoc/Aux/Aux';\n\nclass Signup extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      validated: false,\n      showPassword: false,\n      showPasswordConfirm: false\n    };\n\n    this.onSignupHandler = form => {\n      this.setState({\n        validated: true\n      });\n      this.props.onSignup(form);\n      this.props.history.push(this.props.redirect);\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.redirect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.onCancelSignupHandler = () => {\n      this.props.onCancelSignup();\n    };\n\n    this.onShowPasswordToggle = () => this.setState({\n      showPassword: !this.state.showPassword\n    });\n\n    this.onShowPasswordConfirmToggle = () => this.setState({\n      showPasswordConfirm: !this.state.showPasswordConfirm\n    });\n  }\n\n  render() {\n    const showPasswordIcon = this.state.showPassword ? 'eye-slash' : 'eye';\n    const showPasswordConfirmIcon = this.state.showPasswordConfirm ? 'eye-slash' : 'eye';\n    const errors = this.props.errors && this.props.errors.length > 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: this.props.errors.map((err, key) => {\n        const error = 'path' in err && err.path.length > 0 && err.path[0] === 'repeat_password' ? 'Password must match!' : err.message;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [error, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 60\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this) : null;\n    const signupBtnChild = this.props.loading ? /*#__PURE__*/_jsxDEV(Aux, {\n      children: [/*#__PURE__*/_jsxDEV(Spinner, {\n        as: \"span\",\n        animation: \"grow\",\n        size: \"sm\",\n        role: \"status\",\n        \"aria-hidden\": \"true\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), \"Loading...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this) : 'Signup';\n    const schema = yup.object({\n      email: yup.string().required('Email is required!').email('Please enter a valid Email!'),\n      password: yup.string().required('Password is required!').matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, 'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character'),\n      repeat_password: yup.string().required('Please confirm password!').oneOf([yup.ref('password'), null], 'Passwords must match!')\n    });\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      validationSchema: schema,\n      onSubmit: this.onSignupHandler,\n      initialValues: {\n        email: '',\n        password: '',\n        repeat_password: ''\n      },\n      children: ({\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        noValidate: true,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Email\",\n            name: \"email\",\n            value: values.email,\n            onChange: handleChange,\n            isInvalid: !!errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n            className: \"mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: this.state.showPassword ? 'text' : 'password',\n              placeholder: \"Password\",\n              name: \"password\",\n              value: values.password,\n              onChange: handleChange,\n              isInvalid: !!errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(InputGroup.Prepend, {\n              children: /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: showPasswordIcon,\n                  onClick: this.onShowPasswordToggle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: errors.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"repeat_password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            controlId: \"password\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n              className: \"mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: this.state.showPassword ? 'text' : 'password',\n                placeholder: \"Confirm Password\",\n                name: \"repeat_password\",\n                value: values.repeat_password,\n                onChange: handleChange,\n                isInvalid: !!errors.repeat_password\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(InputGroup.Prepend, {\n                children: /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                  children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                    icon: showPasswordConfirmIcon,\n                    onClick: this.onShowPasswordConfirmToggle\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.repeat_password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.Buttons,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"danger\",\n            type: \"submit\",\n            children: signupBtnChild\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            disabled: this.props.loading,\n            onClick: this.onCancelSignupHandler,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    isAuth: state.signin.token !== null,\n    errors: state.signup.errors,\n    redirect: state.signup.redirect,\n    loading: state.signup.loading,\n    toast: state.signup.toast\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSignup: data => dispatch(actions.signup(data)),\n    onCancelSignup: () => dispatch(actions.signupCancel())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);","map":{"version":3,"sources":["/var/www/git/projects/diary-of-events/client/src/components/Auth/Signup/Signup.js"],"names":["React","Component","connect","Button","Col","InputGroup","Formik","yup","FontAwesomeIcon","actions","classes","Form","Alert","Spinner","Redirect","Aux","Signup","state","validated","showPassword","showPasswordConfirm","onSignupHandler","form","setState","props","onSignup","history","push","redirect","onCancelSignupHandler","onCancelSignup","onShowPasswordToggle","onShowPasswordConfirmToggle","render","showPasswordIcon","showPasswordConfirmIcon","errors","length","map","err","key","error","path","message","signupBtnChild","loading","schema","object","email","string","required","password","matches","repeat_password","oneOf","ref","handleSubmit","handleChange","handleBlur","values","touched","isValid","Buttons","mapStateToProps","isAuth","signin","token","signup","toast","mapDispatchToProps","dispatch","data","signupCancel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport * as actions from '../../../store/actions/index';\n\nimport classes from './Signup.module.css';\nimport { Form, Alert, Spinner } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport Aux from '../../../hoc/Aux/Aux';\n\nclass Signup extends Component {\n    state = {\n        validated: false,\n        showPassword: false,\n        showPasswordConfirm: false,\n    }\n\n    onSignupHandler =  form => {\n        this.setState({ validated: true });\n        this.props.onSignup( form );\n\n        this.props.history.push( this.props.redirect );\n        return <Redirect to={ this.props.redirect} />;\n    }\n\n    onCancelSignupHandler = () => {\n        this.props.onCancelSignup();\n    }\n\n    onShowPasswordToggle = () => this.setState({ showPassword: !this.state.showPassword});\n    onShowPasswordConfirmToggle = () => this.setState({ showPasswordConfirm: !this.state.showPasswordConfirm});\n\n    render () {\n        const showPasswordIcon = this.state.showPassword ? 'eye-slash' : 'eye';\n        const showPasswordConfirmIcon = this.state.showPasswordConfirm ? 'eye-slash' : 'eye';\n\n        const errors = this.props.errors && this.props.errors.length > 0 ? (\n            <Alert variant='danger'>\n                {\n                    this.props.errors.map( ( err, key ) => {\n                        const error = 'path' in err && err.path.length > 0 && err.path[0] === 'repeat_password' ? 'Password must match!':   err.message;\n                        return <span key={ key }>{ error } <br/></span>\n                    })\n                }\n            </Alert>\n        ): null;\n\n        const signupBtnChild = this.props.loading ? (\n            <Aux>\n                <Spinner\n                as=\"span\"\n                animation=\"grow\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n                />\n                Loading...\n            </Aux>\n        ): 'Signup';\n\n        const schema = yup.object({\n            email: yup.string().required('Email is required!').email('Please enter a valid Email!'),\n            password: yup.string().required('Password is required!').matches(\n                /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n                'Minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character'\n            ),\n            repeat_password: yup.string().required('Please confirm password!').oneOf([yup.ref('password'), null], 'Passwords must match!'),\n        });\n\n        return (\n            <Formik\n                validationSchema={schema}\n                onSubmit={this.onSignupHandler}\n                initialValues={{\n                    email: '',\n                    password: '',\n                    repeat_password: ''\n                }}\n            >\n            {({\n                handleSubmit,\n                handleChange,\n                handleBlur,\n                values,\n                touched,\n                isValid,\n                errors,\n            }) => (\n            <Form noValidate onSubmit={handleSubmit}>\n                <Form.Group as={Col} controlId=\"email\">\n                  <Form.Label>Email</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Email\"\n                    name=\"email\"\n                    value={values.email}\n                    onChange={handleChange}\n                    isInvalid={!!errors.email}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.email}\n                  </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group as={Col} controlId=\"password\">\n                    <Form.Label>Password</Form.Label>\n                    <InputGroup className='mb-2'>\n                        <Form.Control\n                            type={ this.state.showPassword ? 'text' : 'password' }\n                            placeholder=\"Password\"\n                            name=\"password\"\n                            value={values.password}\n                            onChange={handleChange}\n                            isInvalid={!!errors.password}\n                        />\n                        <InputGroup.Prepend>\n                            <InputGroup.Text>\n                                <FontAwesomeIcon icon={ showPasswordIcon } onClick={this.onShowPasswordToggle}/>\n                            </InputGroup.Text>\n                        </InputGroup.Prepend>\n                    </InputGroup>\n                    <Form.Control.Feedback type=\"invalid\">\n                        {errors.password}\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group as={Col} controlId=\"repeat_password\">\n                    <Form.Label>Confirm Password</Form.Label>\n                    <Form.Group as={Col} controlId=\"password\">\n                        <Form.Label>Password</Form.Label>\n                        <InputGroup className='mb-2'>\n                            <Form.Control\n                                type={ this.state.showPassword ? 'text' : 'password' }\n                                placeholder=\"Confirm Password\"\n                                name=\"repeat_password\"\n                                value={values.repeat_password}\n                                onChange={handleChange}\n                                isInvalid={!!errors.repeat_password}\n                            />\n                            <InputGroup.Prepend>\n                                <InputGroup.Text>\n                                    <FontAwesomeIcon icon={ showPasswordConfirmIcon } onClick={this.onShowPasswordConfirmToggle}/>\n                                </InputGroup.Text>\n                            </InputGroup.Prepend>\n                        </InputGroup>\n                        <Form.Control.Feedback type=\"invalid\">\n                            {errors.repeat_password}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Group>\n                <div className={classes.Buttons}>\n                    <Button variant='danger' type=\"submit\">{ signupBtnChild }</Button>\n                    <Button variant='secondary' disabled={this.props.loading} onClick={this.onCancelSignupHandler}>Cancel</Button>\n                </div>\n            </Form>\n          )}\n        </Formik>);\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        isAuth: state.signin.token !== null,\n        errors: state.signup.errors,\n        redirect: state.signup.redirect,\n        loading: state.signup.loading,\n        toast: state.signup.toast\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSignup: data => dispatch( actions.signup( data ) ),\n        onCancelSignup: () => dispatch ( actions.signupCancel () ),\n    }\n}\n\nexport default connect( mapStateToProps, mapDispatchToProps)( Signup );\n"]},"metadata":{},"sourceType":"module"}