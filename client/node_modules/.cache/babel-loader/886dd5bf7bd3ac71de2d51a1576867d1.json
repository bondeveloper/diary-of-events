{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/git/projects/diary-of-events/src/components/pages/Workouts/View/Sessions/Create/Create.js\";\nimport React, { Component } from 'react';\nimport { Container, Row, Col, Form, Spinner, Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport classes from './Create.module.css';\nimport * as actions from '../../../../../../store/actions/index';\nimport { workoutSessionForm, formInputChanged } from '../../../../../../shared/form-utility';\nimport { formObjectToArray, mapKeyToValue, tranformPascalCaseToUnderscoreCase } from '../../../../../../shared/utility';\nimport Aux from '../../../../../../hoc/Aux/Aux';\n\nclass WorkoutSessionCreate extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      form: workoutSessionForm\n    };\n\n    this.inputChangedHandler = (event, key) => {\n      this.setState({\n        form: formInputChanged(this.state.form, event, key)\n      });\n    };\n\n    this.onCreateWorkoutSessionHandler = event => {\n      this.props.onCreateWorkoutSession({\n        data: tranformPascalCaseToUnderscoreCase(mapKeyToValue(this.state.form)),\n        id: this.props.match.params.id,\n        token: this.props.token\n      });\n    };\n  }\n\n  render() {\n    let form = formObjectToArray(this.state.form).map(ele => {\n      let formElements = null;\n\n      switch (ele.settings.type) {\n        case 'input':\n          formElements = /*#__PURE__*/_jsxDEV(Aux, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: \"auto\",\n              className: \"my-1\",\n              children: /*#__PURE__*/_jsxDEV(Form.Label, {\n                children: [\" \", ele.settings.label, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              sm: 6,\n              className: \"my-1\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                htmlFor: ele.key,\n                srOnly: true,\n                children: ele.settings.label\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: ele.settings.type,\n                id: ele.key,\n                placeholder: ele.settings.config.placeholder,\n                onChange: event => this.inputChangedHandler(event, ele.key)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this);\n          break;\n\n        case 'select':\n          const optionsData = ele.settings.config.options;\n          const options = Object.keys(optionsData).map(key => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: key,\n              children: [\" \", optionsData[key]]\n            }, key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this);\n          });\n          formElements = /*#__PURE__*/_jsxDEV(Aux, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              sm: 4,\n              className: \"my-1\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                htmlFor: ele.key,\n                srOnly: true,\n                children: \"unit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                defaultValue: \"Choose...\",\n                id: ele.key,\n                onChange: event => this.inputChangedHandler(event, ele.key),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  children: [\" \", ele.settings.config.placeholder, \"...\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 37\n                }, this), options]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this);\n          break;\n\n        default:\n          console.log(ele.settings.type);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Form.Row, {\n        className: \"align-items-center\",\n        children: formElements\n      }, ele.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this);\n    });\n    const btnChild = this.props.loading ? /*#__PURE__*/_jsxDEV(Aux, {\n      children: [/*#__PURE__*/_jsxDEV(Spinner, {\n        as: \"span\",\n        animation: \"grow\",\n        size: \"sm\",\n        role: \"status\",\n        \"aria-hidden\": \"true\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 16\n      }, this), \"Loading...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 12\n    }, this) : 'submit';\n    const schema = yup.object({\n      name: yup.string().required(),\n      description: yup.string().required()\n    });\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: classes.Create,\n      children: [/*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.redirect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          sm: \"12\",\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [form, /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"danger\",\n              onClick: this.onCreateWorkoutSessionHandler,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    token: state.signin.token,\n    redirect: state.workouts.redirect\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onCreateWorkoutSession: data => dispatch(actions.createWorkoutSession(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WorkoutSessionCreate);","map":{"version":3,"sources":["/var/www/git/projects/diary-of-events/src/components/pages/Workouts/View/Sessions/Create/Create.js"],"names":["React","Component","Container","Row","Col","Form","Spinner","Button","connect","Redirect","Formik","yup","classes","actions","workoutSessionForm","formInputChanged","formObjectToArray","mapKeyToValue","tranformPascalCaseToUnderscoreCase","Aux","WorkoutSessionCreate","state","form","inputChangedHandler","event","key","setState","onCreateWorkoutSessionHandler","props","onCreateWorkoutSession","data","id","match","params","token","render","map","ele","formElements","settings","type","label","config","placeholder","optionsData","options","Object","keys","console","log","btnChild","loading","schema","object","name","string","required","description","Create","redirect","mapStateToProps","signin","workouts","mapDispatchToProps","dispatch","createWorkoutSession"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,OAApC,EAA6CC,MAA7C,QAA2D,iBAA3D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uCAAzB;AAEA,SAASC,kBAAT,EAA6BC,gBAA7B,QAAqD,uCAArD;AACA,SAASC,iBAAT,EAA4BC,aAA5B,EAA2CC,kCAA3C,QAAqF,kCAArF;AACA,OAAOC,GAAP,MAAgB,+BAAhB;;AAEA,MAAMC,oBAAN,SAAmCnB,SAAnC,CAA6C;AAAA;AAAA;AAAA,SACzCoB,KADyC,GACjC;AACJC,MAAAA,IAAI,EAAER;AADF,KADiC;;AAAA,SAKzCS,mBALyC,GAKnB,CAAEC,KAAF,EAASC,GAAT,KAAkB;AACpC,WAAKC,QAAL,CAAc;AAAEJ,QAAAA,IAAI,EAAEP,gBAAgB,CAAE,KAAKM,KAAL,CAAWC,IAAb,EAAmBE,KAAnB,EAA0BC,GAA1B;AAAxB,OAAd;AACH,KAPwC;;AAAA,SASzCE,6BATyC,GASTH,KAAK,IAAI;AACrC,WAAKI,KAAL,CAAWC,sBAAX,CAAkC;AAC9BC,QAAAA,IAAI,EAAEZ,kCAAkC,CAAED,aAAa,CAAE,KAAKI,KAAL,CAAWC,IAAb,CAAf,CADV;AAE9BS,QAAAA,EAAE,EAAE,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBF,EAFE;AAG9BG,QAAAA,KAAK,EAAE,KAAKN,KAAL,CAAWM;AAHY,OAAlC;AAKH,KAfwC;AAAA;;AAiBzCC,EAAAA,MAAM,GAAI;AACN,QAAIb,IAAI,GAAGN,iBAAiB,CAAE,KAAKK,KAAL,CAAWC,IAAb,CAAjB,CAAqCc,GAArC,CAA0CC,GAAG,IAAI;AACxD,UAAIC,YAAY,GAAG,IAAnB;;AAEA,cAASD,GAAG,CAACE,QAAJ,CAAaC,IAAtB;AACI,aAAK,OAAL;AACIF,UAAAA,YAAY,gBACR,QAAC,GAAD;AAAA,oCACI,QAAC,GAAD;AAAK,cAAA,EAAE,EAAC,MAAR;AAAe,cAAA,SAAS,EAAC,MAAzB;AAAA,qCACI,QAAC,IAAD,CAAM,KAAN;AAAA,gCAAeD,GAAG,CAACE,QAAJ,CAAaE,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADJ,eAII,QAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAY,cAAA,SAAS,EAAC,MAAtB;AAAA,sCACI,QAAC,IAAD,CAAM,KAAN;AAAY,gBAAA,OAAO,EAAEJ,GAAG,CAACZ,GAAzB;AAA8B,gBAAA,MAAM,MAApC;AAAA,0BACEY,GAAG,CAACE,QAAJ,CAAaE;AADf;AAAA;AAAA;AAAA;AAAA,sBADJ,eAII,QAAC,IAAD,CAAM,OAAN;AACI,gBAAA,IAAI,EAAGJ,GAAG,CAACE,QAAJ,CAAaC,IADxB;AAEI,gBAAA,EAAE,EAAEH,GAAG,CAACZ,GAFZ;AAGI,gBAAA,WAAW,EAAGY,GAAG,CAACE,QAAJ,CAAaG,MAAb,CAAoBC,WAHtC;AAII,gBAAA,QAAQ,EAAGnB,KAAK,IAAI,KAAKD,mBAAL,CAA0BC,KAA1B,EAAiCa,GAAG,CAACZ,GAArC;AAJxB;AAAA;AAAA;AAAA;AAAA,sBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ;AAiBA;;AACJ,aAAK,QAAL;AACI,gBAAMmB,WAAW,GAAGP,GAAG,CAACE,QAAJ,CAAaG,MAAb,CAAoBG,OAAxC;AACA,gBAAMA,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAaH,WAAb,EAA2BR,GAA3B,CAAgCX,GAAG,IAAI;AACnD,gCACI;AAAQ,cAAA,KAAK,EAAGA,GAAhB;AAAA,8BAAmCmB,WAAW,CAACnB,GAAD,CAA9C;AAAA,eAA2BA,GAA3B;AAAA;AAAA;AAAA;AAAA,oBADJ;AAGH,WAJe,CAAhB;AAKAa,UAAAA,YAAY,gBACR,QAAC,GAAD;AAAA,mCACI,QAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAY,cAAA,SAAS,EAAC,MAAtB;AAAA,sCACI,QAAC,IAAD,CAAM,KAAN;AAAY,gBAAA,OAAO,EAAED,GAAG,CAACZ,GAAzB;AAA8B,gBAAA,MAAM,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAII,QAAC,IAAD,CAAM,OAAN;AACI,gBAAA,EAAE,EAAC,QADP;AAEI,gBAAA,YAAY,EAAC,WAFjB;AAGI,gBAAA,EAAE,EAAGY,GAAG,CAACZ,GAHb;AAII,gBAAA,QAAQ,EAAGD,KAAK,IAAI,KAAKD,mBAAL,CAA0BC,KAA1B,EAAiCa,GAAG,CAACZ,GAArC,CAJxB;AAAA,wCAKI;AAAA,kCAAWY,GAAG,CAACE,QAAJ,CAAaG,MAAb,CAAoBC,WAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,wBALJ,EAMME,OANN;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAiBA;;AACJ;AACIG,UAAAA,OAAO,CAACC,GAAR,CAAaZ,GAAG,CAACE,QAAJ,CAAaC,IAA1B;AA9CR;;AAiDA,0BACI,QAAC,IAAD,CAAM,GAAN;AAAU,QAAA,SAAS,EAAC,oBAApB;AAAA,kBACMF;AADN,SAA+CD,GAAG,CAACZ,GAAnD;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KAzDU,CAAX;AA2DA,UAAMyB,QAAQ,GAAG,KAAKtB,KAAL,CAAWuB,OAAX,gBACd,QAAC,GAAD;AAAA,8BACI,QAAC,OAAD;AACA,QAAA,EAAE,EAAC,MADH;AAEA,QAAA,SAAS,EAAC,MAFV;AAGA,QAAA,IAAI,EAAC,IAHL;AAIA,QAAA,IAAI,EAAC,QAJL;AAKA,uBAAY;AALZ;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADc,GAWd,QAXH;AAaA,UAAMC,MAAM,GAAGzC,GAAG,CAAC0C,MAAJ,CAAW;AACtBC,MAAAA,IAAI,EAAE3C,GAAG,CAAC4C,MAAJ,GAAaC,QAAb,EADgB;AAEtBC,MAAAA,WAAW,EAAE9C,GAAG,CAAC4C,MAAJ,GAAaC,QAAb;AAFS,KAAX,CAAf;AAKA,wBACA,QAAC,SAAD;AAAW,MAAA,SAAS,EAAE5C,OAAO,CAAC8C,MAA9B;AAAA,8BACI,QAAC,QAAD;AAAU,QAAA,EAAE,EAAE,KAAK9B,KAAL,CAAW+B;AAAzB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,GAAD;AAAA,+BACI,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,IAAR;AAAA,iCACI,QAAC,IAAD;AAAA,uBACMrC,IADN,eAEI,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAC,QAAhB;AAAyB,cAAA,OAAO,EAAE,KAAKK,6BAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAeH;;AA9GwC;;AA+G5C;;AAED,MAAMiC,eAAe,GAAGvC,KAAK,IAAI;AAC7B,SAAO;AACHa,IAAAA,KAAK,EAAEb,KAAK,CAACwC,MAAN,CAAa3B,KADjB;AAEHyB,IAAAA,QAAQ,EAAEtC,KAAK,CAACyC,QAAN,CAAeH;AAFtB,GAAP;AAIH,CALD;;AAOA,MAAMI,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHnC,IAAAA,sBAAsB,EAAEC,IAAI,IAAIkC,QAAQ,CAAEnD,OAAO,CAACoD,oBAAR,CAA8BnC,IAA9B,CAAF;AADrC,GAAP;AAGH,CAJD;;AAOA,eAAetB,OAAO,CAAEoD,eAAF,EAAoBG,kBAApB,CAAP,CAAiD3C,oBAAjD,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Row, Col, Form, Spinner, Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport classes from './Create.module.css';\nimport * as actions from '../../../../../../store/actions/index';\n\nimport { workoutSessionForm, formInputChanged } from '../../../../../../shared/form-utility';\nimport { formObjectToArray, mapKeyToValue, tranformPascalCaseToUnderscoreCase } from '../../../../../../shared/utility';\nimport Aux from '../../../../../../hoc/Aux/Aux';\n\nclass WorkoutSessionCreate extends Component {\n    state = {\n        form: workoutSessionForm\n    }\n\n    inputChangedHandler = ( event, key ) => {\n        this.setState({ form: formInputChanged( this.state.form, event, key ) });\n    }\n\n    onCreateWorkoutSessionHandler = event => {\n        this.props.onCreateWorkoutSession({\n            data: tranformPascalCaseToUnderscoreCase( mapKeyToValue( this.state.form ) ),\n            id: this.props.match.params.id,\n            token: this.props.token\n        });\n    }\n\n    render () {\n        let form = formObjectToArray( this.state.form ).map( ele => {\n            let formElements = null;\n\n            switch ( ele.settings.type ) {\n                case 'input' :\n                    formElements = (\n                        <Aux>\n                            <Col xs=\"auto\" className=\"my-1\">\n                                <Form.Label> { ele.settings.label } </Form.Label>\n                            </Col>\n                            <Col sm={6} className=\"my-1\">\n                                <Form.Label htmlFor={ele.key} srOnly>\n                                { ele.settings.label }\n                                </Form.Label>\n                                <Form.Control\n                                    type={ ele.settings.type }\n                                    id={ele.key}\n                                    placeholder={ ele.settings.config.placeholder }\n                                    onChange={ event => this.inputChangedHandler( event, ele.key ) }/>\n                            </Col>\n                        </Aux>\n                    );\n                    break;\n                case 'select' :\n                    const optionsData = ele.settings.config.options;\n                    const options = Object.keys( optionsData ).map( key => {\n                        return (\n                            <option value={ key } key={key}> { optionsData[key] }</option>\n                        )\n                    });\n                    formElements = (\n                        <Aux>\n                            <Col sm={4} className=\"my-1\">\n                                <Form.Label htmlFor={ele.key} srOnly>\n                                    unit\n                                </Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    defaultValue=\"Choose...\"\n                                    id={ ele.key }\n                                    onChange={ event => this.inputChangedHandler( event, ele.key )} >\n                                    <option> { ele.settings.config.placeholder }...</option>\n                                    { options }\n                                </Form.Control>\n                            </Col>\n                        </Aux>\n                    );\n                    break;\n                default:\n                    console.log( ele.settings.type );\n            }\n\n            return (\n                <Form.Row className=\"align-items-center\" key={ ele.key }>\n                    { formElements }\n                </Form.Row>\n            );\n        });\n\n        const btnChild = this.props.loading ? (\n           <Aux>\n               <Spinner\n               as=\"span\"\n               animation=\"grow\"\n               size=\"sm\"\n               role=\"status\"\n               aria-hidden=\"true\"\n               />\n               Loading...\n           </Aux>\n        ): 'submit';\n\n        const schema = yup.object({\n            name: yup.string().required(),\n            description: yup.string().required(),\n        });\n\n        return (\n        <Container className={classes.Create}>\n            <Redirect to={this.props.redirect} />\n            <Row>\n                <Col sm='12'>\n                    <Form>\n                        { form }\n                        <Button variant='danger' onClick={this.onCreateWorkoutSessionHandler}>\n                            Submit\n                        </Button>\n                    </Form>\n                </Col>\n            </Row>\n        </Container>\n        );\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        token: state.signin.token,\n        redirect: state.workouts.redirect\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCreateWorkoutSession: data => dispatch( actions.createWorkoutSession( data ))\n    };\n};\n\n\nexport default connect( mapStateToProps , mapDispatchToProps) ( WorkoutSessionCreate );\n"]},"metadata":{},"sourceType":"module"}