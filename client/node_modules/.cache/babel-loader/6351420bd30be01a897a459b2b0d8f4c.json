{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/git/projects/diary-of-events/src/components/Auth/Signin/Signin.js\";\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Form, Alert, Button, Spinner, Col } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport classes from './Signin.module.css';\nimport { signinForm, formInputChanged } from '../../../shared/form-utility';\nimport { formObjectToArray, mapKeyToValue } from '../../../shared/utility';\nimport Aux from '../../../hoc/Aux/Aux';\nimport * as actions from '../../../store/actions/index';\n\nclass Signin extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      form: signinForm,\n      validated: false\n    };\n\n    this.validate = () => {\n      return yup.object.shape({\n        email: yup.string().email('Invalid email!').required('Email is required')\n      });\n    };\n\n    this.inputChangedHandler = (event, key) => {\n      this.setState({\n        form: formInputChanged(this.state.form, event, key)\n      });\n    };\n\n    this.onSigninHandler = event => {\n      const form = event.currentTarget;\n      console.log(form);\n\n      if (form.checkValidity() == false) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n\n      this.setState({\n        validated: true\n      }); // this.props.onSignin( mapKeyToValue( this.state.form ));\n      // return <Redirect to={ this.props.redirect} />;\n    };\n  }\n\n  componentDidMount() {\n    this.props.onCheckAuth();\n\n    if (this.props.isAuth) {\n      this.props.history.push(this.props.redirect);\n      return;\n    }\n\n    this.props.onSigninShow();\n  }\n\n  render() {\n    const errors = this.props.errors && this.props.errors.length > 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: this.props.errors.map((err, key) => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [err.message, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 94\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 60\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this) : null;\n    let form = formObjectToArray(this.state.form).map(ele => {\n      return /*#__PURE__*/_jsxDEV(Form.Group, {\n        as: Col,\n        controlId: ele.key,\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: ele.settings.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          required: ele.settings.config.required,\n          type: ele.settings.config.type,\n          placeholder: ele.settings.config.placeholder,\n          onChange: event => this.inputChangedHandler(event, ele.key)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n          type: \"invalid\",\n          children: \" Field is required. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, ele.key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this);\n    });\n    let redirect = this.props.isAuth ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: this.props.redirect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 44\n    }, this) : null;\n    const signinBtnChild = this.props.loading ? /*#__PURE__*/_jsxDEV(Aux, {\n      children: [/*#__PURE__*/_jsxDEV(Spinner, {\n        as: \"span\",\n        animation: \"grow\",\n        size: \"sm\",\n        role: \"status\",\n        \"aria-hidden\": \"true\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), \"Loading...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this) : 'Signup';\n    const validation = yup.object({\n      email: yup.string().email('Invalid email!').required('Email is required')\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.Signin,\n      children: [errors, /*#__PURE__*/_jsxDEV(Formik, {\n        validationSchema: validation,\n        onSubmit: values => {\n          console.log(values);\n        },\n        initialValues: {\n          email: ''\n        },\n        children: ({\n          errors,\n          touched\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          noValidate: true,\n          className: classes.Form,\n          onSubmit: this.onSigninHandler,\n          children: [redirect, /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            controlId: \"email\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Controls, {\n              required: true,\n              type: \"email\",\n              placeholder: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this), errors.email && touched.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 35\n            }, this) : null]\n          }, 'email', true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.Buttons,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"danger\",\n              type: \"submit\",\n              children: signinBtnChild\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    isAuth: state.signin.token !== null,\n    redirect: state.signin.redirect,\n    errors: state.signin.errors,\n    loading: state.signin.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSignin: data => dispatch(actions.signin(data)),\n    onSigninShow: () => dispatch(actions.showSignin()),\n    onCheckAuth: () => dispatch(actions.checkSignedIn())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signin);","map":{"version":3,"sources":["/var/www/git/projects/diary-of-events/src/components/Auth/Signin/Signin.js"],"names":["connect","React","Component","Redirect","Form","Alert","Button","Spinner","Col","Formik","yup","classes","signinForm","formInputChanged","formObjectToArray","mapKeyToValue","Aux","actions","Signin","state","form","validated","validate","object","shape","email","string","required","inputChangedHandler","event","key","setState","onSigninHandler","currentTarget","console","log","checkValidity","preventDefault","stopPropagation","componentDidMount","props","onCheckAuth","isAuth","history","push","redirect","onSigninShow","render","errors","length","map","err","message","ele","settings","label","config","type","placeholder","signinBtnChild","loading","validation","values","touched","Buttons","mapStateToProps","signin","token","mapDispatchToProps","dispatch","onSignin","data","showSignin","checkSignedIn"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Form, Alert, Button, Spinner, Col } from 'react-bootstrap';\nimport { Formik } from 'formik';\n import * as yup from 'yup';\n\nimport classes from './Signin.module.css';\n\nimport { signinForm, formInputChanged} from '../../../shared/form-utility';\nimport { formObjectToArray, mapKeyToValue } from '../../../shared/utility';\nimport Aux from '../../../hoc/Aux/Aux';\n\nimport * as actions from '../../../store/actions/index';\n\nclass Signin extends Component {\n    state = {\n        form: signinForm,\n        validated: false\n    }\n\n    validate = () => {\n        return yup.object.shape({\n            email: yup.string().email('Invalid email!').required('Email is required')\n        });\n    };\n\n    componentDidMount () {\n        this.props.onCheckAuth();\n        if ( this.props.isAuth ) {\n            this.props.history.push(this.props.redirect);\n            return;\n        }\n        this.props.onSigninShow();\n    }\n\n    inputChangedHandler = ( event, key ) => {\n        this.setState({ form: formInputChanged( this.state.form, event, key) });\n    }\n\n    onSigninHandler = event => {\n        const form = event.currentTarget;\n        console.log(form);\n\n        if ( form.checkValidity() == false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        this.setState({ validated: true });\n        // this.props.onSignin( mapKeyToValue( this.state.form ));\n        // return <Redirect to={ this.props.redirect} />;\n    }\n\n    render () {\n        const errors = this.props.errors && this.props.errors.length > 0 ? (\n            <Alert variant='danger'>\n                {\n                    this.props.errors.map( ( err, key ) => <span key={ key }>{ err.message } <br/></span>)\n                }\n            </Alert>\n        ): null;\n\n        let form = formObjectToArray( this.state.form ).map( ele => {\n            return (\n                <Form.Group as={Col} controlId={ele.key} key={ele.key}>\n                    <Form.Label>{ ele.settings.label }</Form.Label>\n                    <Form.Control\n                        required={ ele.settings.config.required }\n                        type={ ele.settings.config.type }\n                        placeholder={ ele.settings.config.placeholder}\n                        onChange={ event => this.inputChangedHandler( event, ele.key)}/>\n                    <Form.Control.Feedback type=\"invalid\"> Field is required. </Form.Control.Feedback>\n                </Form.Group>\n            );\n\n        });\n\n        let redirect = this.props.isAuth ? <Redirect to={this.props.redirect} /> : null;\n\n        const signinBtnChild = this.props.loading ? (\n            <Aux>\n                <Spinner\n                as=\"span\"\n                animation=\"grow\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n                />\n                Loading...\n            </Aux>\n        ): 'Signup';\n\n        const validation = yup.object({\n            email: yup.string().email('Invalid email!').required('Email is required')\n        });\n\n        return (\n            <div className={classes.Signin}>\n                {errors}\n                <Formik\n                    validationSchema={validation}\n                    onSubmit={values => {\n                        console.log(values);\n                    }}\n                    initialValues={{\n                        email: '',\n                    }}\n                >\n                {( { errors, touched }) => (\n                    <Form noValidate className={classes.Form} onSubmit={this.onSigninHandler}>\n                        {redirect}\n                        <Form.Group as={Col} controlId='email' key='email'>\n                            <Form.Label>Email</Form.Label>\n                            <Form.Controls\n                                required\n                                type='email'\n                                placeholder='Email'/>\n                                {errors.email && touched.email ? (\n                                  <div>{errors.email}</div>\n                                ) : null}\n                        </Form.Group>\n                        <div className={classes.Buttons}>\n                            <Button variant='danger' type=\"submit\">{ signinBtnChild }</Button>\n                            {/* <Button variant='secondary' disabled={this.props.loading}>Cancel</Button> */}\n                        </div>\n                    </Form>\n                )}\n                </Formik>\n            </div>\n        );\n    };\n};\n\nconst mapStateToProps = state => {\n    console.log( state );\n    return {\n        isAuth: state.signin.token !== null,\n        redirect: state.signin.redirect,\n        errors: state.signin.errors,\n        loading: state.signin.loading\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSignin : data => dispatch( actions.signin ( data ) ),\n        onSigninShow: () => dispatch( actions.showSignin() ),\n        onCheckAuth: () => dispatch( actions.checkSignedIn() )\n    };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps) ( Signin );\n"]},"metadata":{},"sourceType":"module"}