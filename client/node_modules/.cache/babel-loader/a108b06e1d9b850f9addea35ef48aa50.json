{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/git/projects/diary-of-events/src/components/Auth/Signup/Signup.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport * as actions from '../../../store/actions/index';\nimport { formObjectToArray, mapKeyToValue } from '../../../shared/utility';\nimport { signupForm, formInputChanged } from '../../../shared/form-utility';\nimport classes from './Signup.module.css';\nimport { Form, Alert, Spinner } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport Aux from '../../../hoc/Aux/Aux';\n\nclass Signup extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      validated: false\n    };\n\n    this.inputChangedHandler = (event, key) => {\n      this.setState({\n        form: formInputChanged(this.state.form, event, key)\n      });\n    };\n\n    this.onSignupHandler = async form => {\n      await this.props.onSignin(form);\n      this.props.history.push(this.props.redirect);\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.redirect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.onCancelSignupHandler = () => {\n      this.props.onCancelSignup();\n    };\n  }\n\n  render() {\n    const errors = this.props.errors && this.props.errors.length > 0 ? /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"danger\",\n      children: this.props.errors.map((err, key) => {\n        const error = 'path' in err && err.path.length > 0 && err.path[0] === 'repeat_password' ? 'Password must match!' : err.message;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [error, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 60\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this) : null;\n    let form = formObjectToArray(this.state.form).map(ele => {\n      return /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: ele.key,\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: [\" \", ele.settings.label]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: ele.settings.config.type,\n          placeholder: ele.settings.config.placeholder,\n          onChange: event => this.inputChangedHandler(event, ele.key)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, ele.key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this);\n    });\n    const signupBtnChild = this.props.loading ? /*#__PURE__*/_jsxDEV(Aux, {\n      children: [/*#__PURE__*/_jsxDEV(Spinner, {\n        as: \"span\",\n        animation: \"grow\",\n        size: \"sm\",\n        role: \"status\",\n        \"aria-hidden\": \"true\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), \"Loading...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this) : 'Signup';\n    const schema = yup.object({\n      email: yup.string().required().email(),\n      password: yup.string().required(),\n      repeat_password: yup.string().required()\n    });\n    return (\n      /*#__PURE__*/\n      // <div className={classes.Signup}>\n      //     { errors }\n      //     <Form>\n      //         {form}\n      //         <div className={classes.Buttons}>\n      //             <Button variant='danger' onClick={this.onSignupHandler}>{ signupBtnChild }</Button>\n      //             <Button variant='secondary' disabled={this.props.loading} onClick={this.onCancelSignupHandler}>Cancel</Button>\n      //         </div>\n      //     </Form>\n      // </div>\n      _jsxDEV(Formik, {\n        validationSchema: schema,\n        onSubmit: this.onSignupHandler,\n        initialValues: {\n          email: '',\n          password: '',\n          repeat_password: ''\n        },\n        children: ({\n          handleSubmit,\n          handleChange,\n          handleBlur,\n          values,\n          touched,\n          isValid,\n          errors\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          noValidate: true,\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            controlId: \"email\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Email\",\n              name: \"email\",\n              value: values.email,\n              onChange: handleChange,\n              isInvalid: !!errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            as: Col,\n            controlId: \"password\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              placeholder: \"Password\",\n              name: \"password\",\n              value: values.password,\n              onChange: handleChange,\n              isInvalid: !!errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.Buttons,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"danger\",\n              type: \"submit\",\n              children: signupBtnChild\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    isAuth: state.signin.token !== null,\n    errors: state.signup.errors,\n    redirect: state.signup.redirect,\n    loading: state.signup.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSignup: data => dispatch(actions.signup(data)),\n    onCancelSignup: () => dispatch(actions.signupCancel())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);","map":{"version":3,"sources":["/var/www/git/projects/diary-of-events/src/components/Auth/Signup/Signup.js"],"names":["React","Component","connect","Button","Formik","yup","actions","formObjectToArray","mapKeyToValue","signupForm","formInputChanged","classes","Form","Alert","Spinner","Redirect","Aux","Signup","state","validated","inputChangedHandler","event","key","setState","form","onSignupHandler","props","onSignin","history","push","redirect","onCancelSignupHandler","onCancelSignup","render","errors","length","map","err","error","path","message","ele","settings","label","config","type","placeholder","signupBtnChild","loading","schema","object","email","string","required","password","repeat_password","handleSubmit","handleChange","handleBlur","values","touched","isValid","Col","Buttons","mapStateToProps","console","log","isAuth","signin","token","signup","mapDispatchToProps","dispatch","onSignup","data","signupCancel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from 'react-bootstrap/Button';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\n\nimport * as actions from '../../../store/actions/index';\nimport { formObjectToArray, mapKeyToValue } from '../../../shared/utility';\nimport { signupForm, formInputChanged} from '../../../shared/form-utility';\n\nimport classes from './Signup.module.css';\nimport { Form, Alert, Spinner } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport Aux from '../../../hoc/Aux/Aux';\n\nclass Signup extends Component {\n    state = {\n        validated: false\n    }\n\n    inputChangedHandler = (event, key) => {\n        this.setState({ form: formInputChanged( this.state.form, event, key) });\n    }\n\n    onSignupHandler = async ( form ) => {\n        await this.props.onSignin( form );\n\n        this.props.history.push( this.props.redirect );\n        return <Redirect to={ this.props.redirect} />;\n    }\n\n    onCancelSignupHandler = () => {\n        this.props.onCancelSignup();\n    }\n\n    render () {\n        const errors = this.props.errors && this.props.errors.length > 0 ? (\n            <Alert variant='danger'>\n                {\n                    this.props.errors.map( ( err, key ) => {\n                        const error = 'path' in err && err.path.length > 0 && err.path[0] === 'repeat_password' ? 'Password must match!':   err.message;\n                        return <span key={ key }>{ error } <br/></span>\n                    })\n                }\n            </Alert>\n        ): null;\n\n        let form = formObjectToArray( this.state.form ).map( ele => {\n            return (\n                <Form.Group controlId={ ele.key } key={ ele.key }>\n                    <Form.Label> { ele.settings.label }</Form.Label>\n                    <Form.Control\n                        type={ ele.settings.config.type }\n                        placeholder={ ele.settings.config.placeholder }\n                        onChange={ event => this.inputChangedHandler( event, ele.key)}/>\n                </Form.Group>\n            )\n\n        });\n\n        const signupBtnChild = this.props.loading ? (\n            <Aux>\n                <Spinner\n                as=\"span\"\n                animation=\"grow\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n                />\n                Loading...\n            </Aux>\n        ): 'Signup';\n\n        const schema = yup.object({\n            email: yup.string().required().email(),\n            password: yup.string().required(),\n            repeat_password: yup.string().required(),\n        });\n\n        return (\n            // <div className={classes.Signup}>\n            //     { errors }\n            //     <Form>\n            //         {form}\n            //         <div className={classes.Buttons}>\n            //             <Button variant='danger' onClick={this.onSignupHandler}>{ signupBtnChild }</Button>\n            //             <Button variant='secondary' disabled={this.props.loading} onClick={this.onCancelSignupHandler}>Cancel</Button>\n            //         </div>\n            //     </Form>\n            // </div>\n            <Formik\n                validationSchema={schema}\n                onSubmit={this.onSignupHandler}\n                initialValues={{\n                    email: '',\n                    password: '',\n                    repeat_password: ''\n                }}\n            >\n            {({\n                handleSubmit,\n                handleChange,\n                handleBlur,\n                values,\n                touched,\n                isValid,\n                errors,\n            }) => (\n            <Form noValidate onSubmit={handleSubmit}>\n                <Form.Group as={Col} controlId=\"email\">\n                  <Form.Label>Email</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Email\"\n                    name=\"email\"\n                    value={values.email}\n                    onChange={handleChange}\n                    isInvalid={!!errors.email}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.email}\n                  </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group as={Col} controlId=\"password\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        name=\"password\"\n                        value={values.password}\n                        onChange={handleChange}\n                        isInvalid={!!errors.password}\n                    />\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors.password}\n                      </Form.Control.Feedback>\n                </Form.Group>\n                <div className={classes.Buttons}>\n                    <Button variant='danger' type=\"submit\">{ signupBtnChild }</Button>\n                    {/* <Button variant='secondary' disabled={this.props.loading}>Cancel</Button> */}\n                </div>\n            </Form>\n          )}\n        </Formik>);\n    }\n};\n\nconst mapStateToProps = state => {\n    console.log(state);\n    return {\n        isAuth: state.signin.token !== null,\n        errors: state.signup.errors,\n        redirect: state.signup.redirect,\n        loading: state.signup.loading\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSignup: data => dispatch( actions.signup( data ) ),\n        onCancelSignup: () => dispatch ( actions.signupCancel () ),\n    }\n}\n\nexport default connect( mapStateToProps, mapDispatchToProps)( Signup );\n"]},"metadata":{},"sourceType":"module"}