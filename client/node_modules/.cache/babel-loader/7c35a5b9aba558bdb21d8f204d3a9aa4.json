{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/git/projects/diary-of-events/src/components/Auth/Signin/Signin.js\";\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { Redirect, withRouter } from 'react-router-dom';\nimport classes from './Signin.module.css';\nimport { signinForm, formInputChanged } from '../../../shared/form-utility';\nimport { formObjectToArray, mapKeyToValue } from '../../../shared/utility';\nimport Input from '../../UI/Input/Input';\nimport Button from '../../UI/Button/Button';\nimport * as actions from '../../../store/actions/index';\n\nclass Signin extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      form: signinForm\n    };\n\n    this.inputChangedHandler = (event, key) => {\n      this.setState({\n        form: formInputChanged(this.state.form, event, key)\n      });\n    };\n\n    this.onSigninHandler = event => {\n      event.preventDefault();\n      this.props.onSignin(mapKeyToValue(this.state.form));\n    };\n  }\n\n  componentDidMount() {// this.props.isAuth ? this.props.history.push(this.props.redirect) : null;\n    // if ( this.props.isAuth ) {\n    //     this.props.history.push(this.props.redirect)\n    // }\n  }\n\n  render() {\n    let form = formObjectToArray(this.state.form).map(ele => {\n      return /*#__PURE__*/_jsxDEV(Input, {\n        type: ele.settings.type,\n        config: ele.settings.config,\n        value: ele.settings.value,\n        label: ele.settings.label,\n        changed: event => this.inputChangedHandler(event, ele.key)\n      }, ele.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 20\n      }, this);\n    }); // let redirect = this.props.isAuth ? <Redirect to={this.props.redirect} /> : null;\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [form, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.Buttons,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"Success\",\n            clicked: this.onSigninHandler,\n            children: \"Signin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"Cancel\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    isAuth: state.signin.token !== null,\n    redirect: state.signin.redirect\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSignin: data => dispatch(actions.signin(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signin);","map":{"version":3,"sources":["/var/www/git/projects/diary-of-events/src/components/Auth/Signin/Signin.js"],"names":["connect","React","Component","Redirect","withRouter","classes","signinForm","formInputChanged","formObjectToArray","mapKeyToValue","Input","Button","actions","Signin","state","form","inputChangedHandler","event","key","setState","onSigninHandler","preventDefault","props","onSignin","componentDidMount","render","map","ele","settings","type","config","value","label","Buttons","mapStateToProps","isAuth","signin","token","redirect","mapDispatchToProps","dispatch","data"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { Redirect, withRouter } from 'react-router-dom';\n\nimport classes from './Signin.module.css';\n\nimport { signinForm, formInputChanged} from '../../../shared/form-utility';\nimport { formObjectToArray, mapKeyToValue } from '../../../shared/utility';\nimport Input from '../../UI/Input/Input';\nimport Button from '../../UI/Button/Button';\n\nimport * as actions from '../../../store/actions/index';\n\nclass Signin extends Component {\n    state = {\n        form: signinForm\n    }\n\n    componentDidMount () {\n        // this.props.isAuth ? this.props.history.push(this.props.redirect) : null;\n        // if ( this.props.isAuth ) {\n        //     this.props.history.push(this.props.redirect)\n        // }\n    }\n\n    inputChangedHandler = ( event, key ) => {\n        this.setState({ form: formInputChanged( this.state.form, event, key) });\n    }\n\n    onSigninHandler = ( event ) => {\n        event.preventDefault();\n        this.props.onSignin( mapKeyToValue( this.state.form ));\n    }\n\n    render () {\n        let form = formObjectToArray( this.state.form ).map( ele => {\n            return <Input\n                key={ele.key}\n                type={ele.settings.type}\n                config={ele.settings.config}\n                value={ele.settings.value}\n                label={ele.settings.label}\n                changed={ event => this.inputChangedHandler( event, ele.key)}\n                />\n        });\n\n        // let redirect = this.props.isAuth ? <Redirect to={this.props.redirect} /> : null;\n\n        return (\n            <div>\n                <form>\n                    {/* {redirect} */}\n                    {form}\n                    <div className={classes.Buttons}>\n                        <Button type='Success' clicked={this.onSigninHandler}>Signin</Button>\n                        <Button type='Cancel'>Cancel</Button>\n                    </div>\n                </form>\n            </div>\n        );\n    };\n};\n\nconst mapStateToProps = state => {\n    return {\n        isAuth: state.signin.token !== null,\n        redirect: state.signin.redirect\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSignin : data => dispatch( actions.signin ( data ) )\n    };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps) ( Signin );"]},"metadata":{},"sourceType":"module"}