{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/git/projects/diary-of-events/client/src/components/Auth/Signin/Signin.js\";\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Form, Button, Spinner, Col } from 'react-bootstrap';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classes from './Signin.module.css';\nimport Aux from '../../../hoc/Aux/Aux';\nimport * as actions from '../../../store/actions/index';\n\nclass Signin extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      validated: false,\n      showPassword: false\n    };\n\n    this.onSigninHandler = form => {\n      this.setState({\n        validated: true\n      });\n      this.props.onSignin(form);\n      this.props.history.push(this.props.redirect);\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: this.props.redirect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.onShowPasswordToggle = () => this.setState({\n      showPassword: !this.state.showPassword\n    });\n  }\n\n  componentDidMount() {\n    this.props.onSigninShow();\n  }\n\n  render() {\n    const showPasswordIcon = this.state.showPassword ? 'eye-slash' : 'eye';\n    const signinBtnChild = this.props.loading ? /*#__PURE__*/_jsxDEV(Aux, {\n      children: [/*#__PURE__*/_jsxDEV(Spinner, {\n        as: \"span\",\n        animation: \"grow\",\n        size: \"sm\",\n        role: \"status\",\n        \"aria-hidden\": \"true\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), \"Loading...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this) : 'Signin';\n    const schema = yup.object({\n      email: yup.string().required('Email is required!').email('Please enter a valid Email!'),\n      password: yup.string().required('Password is required!')\n    });\n    return /*#__PURE__*/_jsxDEV(Formik, {\n      validationSchema: schema,\n      onSubmit: this.onSigninHandler,\n      initialValues: {\n        email: '',\n        password: ''\n      },\n      children: ({\n        handleSubmit,\n        handleChange,\n        handleBlur,\n        values,\n        touched,\n        isValid,\n        errors\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        noValidate: true,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Email\",\n            name: \"email\",\n            value: values.email,\n            onChange: handleChange,\n            isInvalid: !!errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n            className: \"mb-2\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: this.state.showPassword ? 'text' : 'password',\n              placeholder: \"Password\",\n              name: \"password\",\n              value: values.password,\n              onChange: handleChange,\n              isInvalid: !!errors.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(InputGroup.Prepend, {\n              children: /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                  icon: showPasswordIcon,\n                  onClick: this.onShowPasswordToggle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 29\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: errors.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.Buttons,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"danger\",\n            type: \"submit\",\n            children: signinBtnChild\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    isAuth: state.signin.token !== null,\n    redirect: state.signin.redirect,\n    errors: state.signin.errors,\n    loading: state.signin.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSignin: data => dispatch(actions.signin(data)),\n    onSigninShow: () => dispatch(actions.showSignin()),\n    onCheckAuth: () => dispatch(actions.checkSignedIn())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signin);","map":{"version":3,"sources":["/var/www/git/projects/diary-of-events/client/src/components/Auth/Signin/Signin.js"],"names":["connect","React","Component","Redirect","Form","Button","Spinner","Col","InputGroup","Formik","yup","FontAwesomeIcon","classes","Aux","actions","Signin","state","validated","showPassword","onSigninHandler","form","setState","props","onSignin","history","push","redirect","onShowPasswordToggle","componentDidMount","onSigninShow","render","showPasswordIcon","signinBtnChild","loading","schema","object","email","string","required","password","handleSubmit","handleChange","handleBlur","values","touched","isValid","errors","Buttons","mapStateToProps","isAuth","signin","token","mapDispatchToProps","dispatch","data","showSignin","onCheckAuth","checkSignedIn"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Form, Button, Spinner, Col } from 'react-bootstrap';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport classes from './Signin.module.css';\nimport Aux from '../../../hoc/Aux/Aux';\nimport * as actions from '../../../store/actions/index';\n\nclass Signin extends Component {\n    state = {\n        validated: false,\n        showPassword: false\n    }\n\n    componentDidMount () {\n        this.props.onSigninShow();\n    }\n\n    onSigninHandler = form => {\n        this.setState({ validated: true });\n        this.props.onSignin( form );\n\n        this.props.history.push( this.props.redirect );\n        return <Redirect to={ this.props.redirect} />;\n    }\n    onShowPasswordToggle = () => this.setState({ showPassword: !this.state.showPassword});\n\n    render () {\n        const showPasswordIcon = this.state.showPassword ? 'eye-slash' : 'eye';\n\n        const signinBtnChild = this.props.loading ? (\n            <Aux>\n                <Spinner\n                as=\"span\"\n                animation=\"grow\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n                />\n                Loading...\n            </Aux>\n        ): 'Signin';\n\n        const schema = yup.object({\n            email: yup.string().required('Email is required!').email('Please enter a valid Email!'),\n            password: yup.string().required('Password is required!'),\n        });\n\n        return (\n        <Formik\n            validationSchema={schema}\n            onSubmit={this.onSigninHandler}\n            initialValues={{\n                email: '',\n                password: ''\n            }}\n        >\n        {({\n            handleSubmit,\n            handleChange,\n            handleBlur,\n            values,\n            touched,\n            isValid,\n            errors,\n        }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n            <Form.Group as={Col} controlId=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Email\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                isInvalid={!!errors.email}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.email}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"password\">\n                <Form.Label>Password</Form.Label>\n                <InputGroup className='mb-2'>\n                    <Form.Control\n                        type={ this.state.showPassword ? 'text' : 'password' }\n                        placeholder=\"Password\"\n                        name=\"password\"\n                        value={values.password}\n                        onChange={handleChange}\n                        isInvalid={!!errors.password}\n                    />\n                    <InputGroup.Prepend>\n                        <InputGroup.Text>\n                            <FontAwesomeIcon icon={ showPasswordIcon } onClick={this.onShowPasswordToggle}/>\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n\n\n                </InputGroup>\n                <Form.Control.Feedback type=\"invalid\">\n                    {errors.password}\n                </Form.Control.Feedback>\n            </Form.Group>\n            <div className={classes.Buttons}>\n                <Button variant='danger' type=\"submit\">{ signinBtnChild }</Button>\n            </div>\n        </Form>\n      )}\n    </Formik>);\n    };\n};\n\nconst mapStateToProps = state => {\n    return {\n        isAuth: state.signin.token !== null,\n        redirect: state.signin.redirect,\n        errors: state.signin.errors,\n        loading: state.signin.loading\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSignin : data => dispatch( actions.signin ( data ) ),\n        onSigninShow: () => dispatch( actions.showSignin() ),\n        onCheckAuth: () => dispatch( actions.checkSignedIn() )\n    };\n};\n\nexport default connect( mapStateToProps, mapDispatchToProps) ( Signin );\n"]},"metadata":{},"sourceType":"module"}